=== ABAP ===
[[ABAP]]による記述は以下のようになる。
 WRITE / 'Hello, world!'.

=== ActiveBasic ===
[[ActiveBasic]]による記述は以下のようになる。
 #prompt
 Print "Hello, world"

=== Ada ===
[[Ada]]による記述は以下のようになる。
<source lang="ada">
with Ada.Text_Io; use Ada.Text_Io;
procedure Hello is
begin
 Put_Line ("Hello, world!");
end Hello;
</source>

=== ALGOL 60 ===
[[ALGOL|ALGOL 60]]による記述は以下のようになる。なお、文字列出力の[[副作用 (プログラム)|副作用]]を持つ標準手続き<code>outstring</code>は定義ずみであるとする。

基準言語

 <code>'''procedure''' hello (channel) ;
   '''value''' channel ;
   '''integer''' channel ;
   '''begin'''
   outstring (channel, 'Hello, world!')
   '''end''' hello ;</code>

金物での表現 (例)

 <code>.PROCEDURE HELLO (CHANNEL) ;
   .VALUE CHANNEL ;
   .INTEGER CHANNEL ;
   .BEGIN
   OUTSTRING (CHANNEL, .'Hello, world!')
   .END HELLO ;</code>

=== APL ===
[[APL]]による記述は以下のようになる。
 'Hello, world!'

=== AWK ===
[[AWK]]による記述は以下のようになる。
 BEGIN { print "Hello, world!" }

=== B ===
[[B言語|B]]による記述は以下のようになる。
 main( ) {
 putchar('Hello, world!*n');
 }

=== BASIC ===
[[BASIC]]による記述は以下のようになる。

古いBASIC（[[N88-BASIC]]など）

 10 PRINT "Hello, world!"
 20 END

現在のBASIC（[[QuickBASIC]]など）

<source lang="qbasic">
 print "Hello, world!"
</source>

=== BCPL ===
[[BCPL]]による記述は以下のようになる。
 GET "LIBHDR"
 
 LET START () BE
 $(
 WRITES ("Hello, world!*N")
 $)

=== Befunge ===
[[Befunge]]による記述は以下のようになる。
 "!dlrow olleH">v
               ,:
               ^_@

=== Boo ===
[[Boo (プログラミング言語)|Boo]]による記述は以下のようになる。
<source lang="python">
print "Hello, World!"
</source>

=== BrainCrash ===
0バイトのソースコードは、Hello, World!と表示する。

=== Brainfuck ===
[[Brainfuck]]による記述は以下のようになる。
 +++++++++[>++++++++>+++++++++++>+++++<<<-]>.>++.+++++++..+++.>-.
 ------------.<++++++++.--------.+++.------.--------.>+.

=== C ===
[[C言語|C]]による記述は以下のようになる。
<source lang="c">
#include <stdio.h>
#include <stdlib.h>
 
int main (int argc, char **argv) 
  {
  puts ("Hello, World!") ;
  return EXIT_SUCCESS ;
  }
</source>

=== C++ ===
[[C++]]による記述は以下のようになる。
<source lang="cpp">
#include <cstdlib>
#include <iostream>
 
int main ()
  {
  std::cout << "Hello, world!" << std::endl ;
  return EXIT_SUCCESS ;
  }
</source>

=== C# ===
[[C Sharp|C#]]による記述は以下のようになる。
<source lang="csharp">
class HelloWorldApp 
{
 static void Main() 
 {
  System.Console.WriteLine("Hello, world!");
 }
}
</source>

=== Ceylon ===
[[Ceylon]]による記述は以下のようになる。

<source lang="java">
void hello() {
   writeLine("Hello World!");
}
</source>

=== Clojure ===
[[Clojure]]による記述は以下のようになる。

<source lang="lisp">
(println "Hello, world!")
</source>

=== COBOL ===
[[COBOL]]による記述は以下のようになる(自由書式の場合)。
 IDENTIFICATION DIVISION.
 PROGRAM-ID. HELLO-WORLD.
 PROCEDURE DIVISION.
 DISPLAY "Hello, world!".
 STOP RUN.

=== Common Lisp ===
[[Common Lisp]]による記述は以下のようになる。
<source lang="lisp">
"Hello, world!"
</source>

=== Concurrent Clean ===
[[Concurrent Clean]]による記述は以下のようになる。
 module HelloWorld
 Start = "Hello, world!"

=== D ===
[[D言語|D]]による記述は以下のようになる。
<source lang="d">
private import std.stdio;
 
void main()
{
    writeln("Hello, world!");
}
</source>

=== Dart ===
[[Dart]]による記述は以下のようになる。

 main() {
   print('Hello, Dart!');
 }

=== Eiffel ===
[[Eiffel]]による記述は以下のようになる。
<source lang="eiffel">
class HELLO_WORLD

creation
 make
feature
 make is
 local
 io:BASIC_IO
 do
 !!io
 io.put_string("%N Hello, world!")
 end -- make
end -- class HELLO_WORLD
</source>

=== Erlang ===
[[Erlang]]による記述は以下のようになる。
 -module(hello).
 -export([hello_world/0]).
 
 hello_world() -> io:fwrite("Hello, World!\n").

=== Fantom ===
[[Fantom (プログラミング言語)|Fantom]]による記述は以下のようになる。

<source lang="java">
class Hello
  {
  static Void main() { echo("Hello, World!") }
  }
</source>

=== Forth ===
[[FORTH|Forth]]による記述は以下のようになる。
 .( Hello, world!) CR

=== FORTRAN ===
[[FORTRAN|FORTRAN77]]による記述は以下のようになる。
<source lang="fortran">
      WRITE(*,10)
   10 FORMAT('Hello, World!')
      STOP
      END
</source>

=== Fortran ===
[[FORTRAN|Fortran90]]による記述は以下のようになる。
<source lang="fortran">
 program main
   print *,"Hello, World!"
 end program main
</source>

=== Go ===
[[Go_(プログラミング言語)|Go]]による記述は以下のようになる。
 package main
 
 import "fmt"
 
 func main() {
 	fmt.Print("Hello, World!\n")
 }

=== Groovy ===
[[Groovy]]による記述は以下のようになる。
 print 'Hello, World!'

=== Haskell ===
[[Haskell]]による記述は以下のようになる。
 main = interact $ const "Hello,World!\n"

=== HMMMML2 ===
[[HMMMML2]]以降による記述は

 ptint "Hello World"

 p"Hello World"

でも超好意的解釈により
 print "Hello World";
となって実行される。
<!--
以下のコードでも動作する。

'''Java文法'''
 System.out.println("Hello World");
'''C文法'''
 printf("Hello World");
'''JavaScript文法'''
 document.write("Hello World");
'''ActionScript文法'''
 trace("Hello World");
'''Processing文法'''
 println("Hello World");
'''BASIC文法'''
 PRINT "Hello World"
'''HSP文法'''
 mes "Hello World"
-->

=== HQ9+ ===
[[HQ9+]]による記述は以下のようになる。
 H

=== HSP ===
[[Hot Soup Processor|HSP]]による記述は以下のようになる。
 mes "Hello World"
または
 print "Hello World"

=== Icon ===
[[Icon言語|Icon]]による記述は以下のようになる。
 procedure main (args)
 write ("Hello, World!")
 end

=== Io ===
[[Io (プログラミング言語)|Io]]による記述は以下のようになる。
<source lang="io">
 "Hello, world!" print
</source>

=== INTERCAL ===
[[INTERCAL]]による記述は以下のようになる。
<pre>
    PLEASE DO ,1 <- #13
    DO ,1 SUB #1 <- #238
    DO ,1 SUB #2 <- #112
    DO ,1 SUB #3 <- #112
    DO ,1 SUB #4 <- #0
    DO ,1 SUB #5 <- #64
    DO ,1 SUB #6 <- #238
    DO ,1 SUB #7 <- #26
    DO ,1 SUB #8 <- #248
    DO ,1 SUB #9 <- #168
    DO ,1 SUB #10 <- #24
    DO ,1 SUB #11 <- #16
    DO ,1 SUB #12 <- #158
    DO ,1 SUB #13 <- #52
    PLEASE READ OUT ,1
    PLEASE GIVE UP
</pre>

=== Java ===
[[Java]]による記述は以下のようになる。
<source lang="java">
public class Hello{
    public static void main(String[] args){
        System.out.println("Hello, world!");
    }
}
</source>

=== Kotlin ===
[[Kotlin]]による記述は以下のようになる。
 fun main (args : Array<String>) {println ("Hello, world!")}

=== KEMURI ===
[[KEMURI (プログラミング言語)|KEMURI]]による記述は以下のようになる。
 `|

=== Lazy K ===
[[Lazy K]]による記述は以下のようになる。
 `k``s``si`k``s`k```sii``s``s`kski``s``s`ksk``s``s`ksk```s``siii``s``s`kski`k``
 s``si`k``s``s`ksk```s``s`kski``s`k``s``s`kski``s``s`ksk```sii``s``s`kski`k``s`
 `si`k``s`k```sii``s``s`kski```sii``s``s`ksk``s``s`kski`k``s``si`k``s`k```sii``
 s``s`kski```sii``s``s`ksk``s``s`kski`k``s``si`k``s``s`ksk``s`k``s``s`kski``s``
 s`ksk``s`k``s``s`kski```sii``s``s`ksk``s``s`kski`k``s``si`k````s``s`ksk```s``s
 iii``s``s`kski`s``s`ksk```sii``s``s`ksk``s``s`kski`k``s``si`k``s`k``s``s`kski`
 ``s``siii``s``s`kski`k``s``si`k``s`k``s``s`ksk``s`k``s``s`kski``s``s`ksk``s``s
 `kski``s``s`ksk```s``siii``s``s`kski`k``s``si`k``s``s`ksk``s`k``s``s`kski``s``
 s`ksk``s`k``s``s`kski```sii``s``s`ksk``s``s`kski`k``s``si`k``s`k``s``s`kski``s
 ``s`ksk``s`k``s``s`kski``s``s`ksk```sii``s``s`ksk``s``s`kski`k``s``si`k``s`k``
 `sii``s``s`kski```sii``s``s`ksk``s``s`kski`k``s``si`k```s``s`kski``s`k``s``s`k
 ski``s``s`ksk```sii``s``s`kski`k``s``si`k``s``s`ksk``s`k``s``s`kski```s``siii`
 `s``s`kski`k``s``si`k``s`k``s``s`kski``s``s`ksk```sii``s``s`kski`k``s``si`k```
 sii```sii``s``s`kski`k```sii```sii``s``s`kski

=== LISP ===
[[LISP]]による記述は以下のようになる。
<source lang="lisp">
 (format t "Hello, World\n")
</source>

=== LOGO ===
[[LOGO]]による記述は以下のようになる。
 TO HELLO
 PRINT [Hello, world!]
 END

=== LSL ===
[[Linden Scripting Language|LSL]]による記述は以下のようになる。
 default
 {
  state_entry()
  {
   llSay(0, "Hello, World!");
  }
 }

=== Lua ===
[[Lua]]による記述は以下のようになる。
 print "Hello, world!"

=== Malbolge ===
[[Malbolge]]による記述は以下のようになる。
 (=<`@?>~6Z:z2VU/.R?10/.-,+*)('&%$#"!~}|{z]Kwvut3EqpiAmlONi

=== Mana ===
[[Mana (プログラミング言語)|Mana]]による記述は以下のようになる。
 action HelloWorldActor::init
 {
  print("Hello, world!\n");
 }

=== Mathematica ===
[[Mathematica]]による記述は以下のようになる。
 Print["Hello, world"]

=== MATLAB ===
[[MATLAB]]による記述は以下のようになる。
 printf ('Hello, world!\n')

=== Mind ===
[[Mind]]による記述は以下のようになる。
 挨拶とは、
 「ようこそ、世界へ！」と表示して、改行すること。
 
 メインとは、
 挨拶すること。

=== Modula-2 ===
[[Modula-2]]による記述は以下のようになる。
 MODULE HellowWorld;
 FROM InOut IMPORT WriteString, WriteLn;
 BEGIN
 WriteString('Hello, world!');
 WriteLn
 END HellowWorld.

=== MONAmona ===
[[MONAmona]]による記述は以下のようになる。
 NNNNNNNNNNnMNNNNNNNMNNNNNNNNNNMNNNMNOOOOAaMNNoMNoNNNNNNNoo
 NNNoMNNoOONNNNNNNNNNNNNNNoMoNNNoAAAAAAoAAAAAAAAoMNoMo

=== Mops ===
[[Mops]]による記述は以下のようになる。
 : hello ( -- ) ." Hello Forth-World!" cr ;

=== Mova ===
[[Mova]]による記述は以下のようになる。
 print "Hello, world!";

=== MS-DOSバッチファイル ===
[[MS-DOSバッチファイル|MS-DOSバッチファイル]]による記述は以下のようになる。
<source lang="dos">
@ECHO OFF
ECHO Hello, world!
</source>

もしくは

<source lang="dos">
@ECHO Hello, world!
</source>

MS-DOS 3.0以前では

<source lang="dos">
ECHO OFF
CLS
ECHO Hello, world!
</source>

=== OCaml ===
[[OCaml]]による記述は以下のようになる。
 print_endline "Hello, world!";;

=== Ook! ===
[[Ook!]]による記述は以下のようになる。
 Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
 Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook. Ook?
 Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
 Ook. Ook. Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
 Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
 Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook.
 Ook? Ook. Ook? Ook. Ook? Ook. Ook? Ook. Ook! Ook! Ook? Ook!
 Ook. Ook? Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook? Ook. Ook.
 Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
 Ook. Ook. Ook. Ook. Ook! Ook. Ook! Ook. Ook. Ook. Ook. Ook.
 Ook. Ook. Ook! Ook. Ook. Ook? Ook. Ook. Ook. Ook. Ook! Ook.
 Ook? Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
 Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.
 Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook.
 Ook. Ook? Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook.
 Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!
 Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!
 Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook. Ook? Ook. Ook.
 Ook! Ook. Ook. Ook? Ook! Ook.

=== Pascal ===
[[Pascal]]による記述は以下のようになる。
<source lang="pascal">
program Hello(output);
begin
 writeln('Hello, world!')
end.
</source>

=== Perl ===
[[Perl]]による記述は以下のようになる。
<source lang="perl">
print "Hello, world!\n";
</source>
以下のような記述も可能である。
<source lang="perl">
''=~('(?{'.('[[).[|`%,,/`[/[@$'^'+)@@/^(@@@@@,@),@').'!
"})')
</source>

=== Pxem ===
[[Pxem]]による記述はファイル名をコードとして解釈できるため、以下のようになる。

''Hello, world!.pxe''

=== PL-I ===
[[PL/I]]による記述は以下のようになる。
 Test: procedure options(main);
 put skip list('Hello, world!');
 end Test;

=== Prolog ===
[[Prolog]]による記述は以下のようになる。
 goal :-
   write('hello, world!\n').

=== Python ===
[[Python]]による記述は以下のようになる。
<source lang="python">
print "Hello, world!"
</source>

=== Q ===
[[Q]]による記述は以下のようになる。
 hello = writes "Hello, world!\n";
 hello;

=== REXX ===
[[REXX]]による記述は以下のようになる。
 /* A comment line at topmost of the script is not a part of program,
 but telling the shell that this is a REXX program, not a batch. */
 say "Hello, world!"

=== Ruby ===
[[Ruby]]による記述は以下のようになる。
<source lang="ruby">
puts "Hello, world!"
</source>

=== Scala ===
[[Scala]]による記述は以下のようになる。
 object HelloWorld extends Application {
   println("Hello, world!")
 }

=== Scheme ===
[[Scheme]]による記述は以下のようになる。
<source lang="scheme">
(display "Hello, world!")
(newline)
</source>

=== sed ===
[[Sed (コンピュータ)|sed]]による記述は以下のようになる。
実行方法:
: $ sed -f hello.sed hello.sed
（hello.sed の内容は以下の通り, 2番目の hello.sed は 1byte以上のファイルであれば何でもよいが、存在を仮定できる hello.sed を例示した） 
 #n
 1i\
 hello, world!

=== SKILL ===
[[SKILL (プログラミング言語)|SKILL]]による記述は以下のようになる。

C言語似の書法:
<source lang="lisp">
println("Hello, world!")
</source>

[[S式]]での書法:
<source lang="lisp">
(println "Hello, world!")
</source>

=== Smalltalk ===
[[Smalltalk]]による記述は以下のようになる。
<source lang="smalltalk">
Transcript show: 'Hello, world!'
</source>

=== SNOBOL ===
[[SNOBOL]]による記述は以下のようになる。
 OUTPUT = "Hello, world!"
 END

=== SQL ===
[[SQL]]による記述は以下のようになる。
<source lang="sql">
select 'hello world' from dual;
select 'hello world';
</source>

=== Squirrel ===
[[Squirrel]]による記述は以下のようになる。
 print("Hello, world!")

=== Standard ML ===
[[プログラミング言語ML|Standard ML]]による記述は以下のようになる。
 print "Hello,world!";

=== Tcl ===
[[Tcl/Tk|Tcl]]による記述は以下のようになる。
<source lang="tcl">
puts "Hello, world!"
</source>

=== UNIX シェルスクリプト ===
UNIX [[シェルスクリプト]]による記述は以下のようになる。
<source lang="bash">
echo 'Hello, world!'
</source>

=== Unlambda ===
[[Unlambda]]による記述は以下のようになる。
 `r`````````````.H.e.l.l.o.,. .w.o.r.l.d.!.a

=== Visual Basic .NET ===
[[Microsoft Visual Basic .NET|Visual Basic .NET]]による記述は以下のようになる。
<source lang="vbnet">
Public Class HelloWorldApp
 Shared Sub Main()
 System.Console.WriteLine("Hello, World!")
 End Sub
End Class
</source>

=== Whitespace ===
[[Whitespace]]による記述は以下のようになる。
<pre>
   	  	   
	
     		  	 	
	
     		 		  
	
     		 		  
	
     		 				
	
     	 		  
	
     	     
	
     			 			
	
     		 				
	
     			  	 
	
     		 		  
	
     		  	  
	
     	    	
	
     	 	 
	
  



</pre>

上記をスペースをS, タブをTで表現した場合は以下のようになる。
<pre>
SSSTSSTSSS
T
SSSSSTTSSTST
T
SSSSSTTSTTSS
T
SSSSSTTSTTSS
T
SSSSSTTSTTTT
T
SSSSSTSTTSS
T
SSSSSTSSSSS
T
SSSSSTTTSTTT
T
SSSSSTTSTTTT
T
SSSSSTTTSSTS
T
SSSSSTTSTTSS
T
SSSSSTTSSTSS
T
SSSSSTSSSST
T
SSSSSTSTS
T
SS



</pre>

=== Windows Script Host ===
[[Windows Script Host]]による記述は以下のようになる。
以下の内容を拡張子が.wsfのファイルに保存しWindows Script Hostを使って実行する。Windows Based Script Hostを用いればGUIで実行することも可能である。

==== JScript ====
[[JScript]]による記述は以下のようになる。
<pre>
<?xml version="1.0"?>
<job>
  <script language="JScript">
    <![CDATA[
      WScript.Echo("Hello, World!");
    ]]>
  </script>
</job>
</pre>

==== VBScript ====
[[VBScript]]による記述は以下のようになる。
<pre>
<?xml version="1.0"?>
<job>
  <script language="VBScript">
    <![CDATA[
      WScript.Echo("Hello, World!")
    ]]>
  </script>
</job>
</pre>

==== PerlScript ====
[[PerlScript]]による記述は以下のようになる。
<pre>
<?xml version="1.0"?>
<job>
  <script language="PerlScript">
    <![CDATA[
      &WScript->Echo("Hello, World!");
    ]]>
  </script>
</job>
</pre>

=== MSIL ===
[[MSIL]]による記述は以下のようになる。
<pre>
.assembly helloworld{}
.method public static void hoge() cil managed
{
	.entrypoint
	ldstr      "Hello, World"
	call       void [mscorlib]System.Console::WriteLine(string)
	ret
}
</pre>

=== Tenems ===
[[Tenems]]による記述は以下のようになる。
 <hello> extends object {
 <Main> static public routine int () {
 Console.WriteLine("Hello, world!");
 return 0;
 }
 }

=== アセンブリ言語 ===

==== 680x0 MPU, Human68k, HAS.x ====
[[68000|680x0]] MPU, [[Human68k]], HAS.xによる記述は以下のようになる。
<source lang="asm">

 pea.l (mes,pc)
 dc.w $ff09        ; DOS _PRINT
 addq.l #4,sp
 dc.w $ff00        ; DOS _EXIT

mes: dc.b 'Hello, world!',0

</source>

==== CASL ====
[[CASL]]による記述は以下のようになる。
<pre>
     OUT TEXT,LEN


LEN  DC  12
TEXT DC  'HELLO
          world!'
</pre>

==== CASLⅡ ====
[[CASL|CASLⅡ]]による記述は以下のようになる。
<pre>
;Output "Hello, World!" program
MAIN     START
         OUT    BUF,LEN
         RET
BUF      DC     'Hello, World!'
LEN      DC     13
         END
</pre>

==== PowerPC CPU, Mac OS, Fantasm ====
PowerPC CPU, [[Mac OS]], Fantasmによる記述は以下のようになる。
<pre>
        lwz r3,hello(rtoc)
        Xcall DrawString
        blr
hello: pstring "Hello, world!"
</pre>

==== x86 CPU, Linux, NASM ====
x86 CPU, [[Linux]], NASMによる記述は以下のようになる。
<source lang="asm">
; "Hello World" for Linux on Intel 80x86 using nasm (Intel syntax).
; Enter this into "hello.asm" then type:
; "nasm -f elf hello.asm"
; "ld hello.o -o hello"
; "./hello"

section .data ;data section declaration
msg db 'Hello World!',0AH
len equ $-msg ;string length

section .text ;code section declaration
global _start ;entry point (start of execution)
_start: mov edx,len ;string length
 mov ecx,msg ;string start
 mov ebx,1 ;file handle: stdout
 mov eax,4 ;sys_write
 int 80h ;kernel system call
 
 mov ebx,0 ;return value
 mov eax,1 ;sys_exit
 int 80h ;kernel system call
</source>

==== x86 CPU, MS-DOS, NASM ====
[[80x86|x86]] CPU, [[MS-DOS]], NASM による記述は以下のようになる。
<source lang="asm">
; hello_world.asm
 bits 16
 org 100h

 mov ah, 09
 mov dx, message
 int 21h

 mov ax, 4C00h
 int 21h

message db 'Hello, world!$'
</source>
